import asyncio
import hashlib
import os
import time
from collections import Counter
from datetime import datetime
from typing import Optional

import requests
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from config import BOT_TOKEN, OPENWEATHER_API_KEY, EXCHANGE_API_KEY
from models import TaskStorage

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

task_storage = TaskStorage()

command_stats = Counter()
start_time = time.time()

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
unique_users = set()

TASKS_PER_PAGE = 10

def add_user(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    unique_users.add(user_id)

@router.message(Command("start"))
async def start_command(message: Message):
    add_user(message.from_user.id)
    command_stats['start'] += 1
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –£–Ω–∏–ü–æ–º–æ—â–Ω–∏–∫ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìù /todo - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n"
        "üå§Ô∏è /weather <–≥–æ—Ä–æ–¥> - –ø–æ–≥–æ–¥–∞\n"
        "üí± /rate <–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞> <–≤–∞–ª—é—Ç—ã> - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n"
        "üìÅ /fileinfo - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ\n"
        "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚ùì /help - –ø–æ–º–æ—â—å"
    )

@router.message(Command("help"))
async def help_command(message: Message):
    add_user(message.from_user.id)
    command_stats['help'] += 1
    await message.answer(
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üìù /todo add <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "üìù /todo list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
        "üìù /todo done <id> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n\n"
        "üå§Ô∏è /weather –ú–æ—Å–∫–≤–∞ - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n\n"
        "üí± /rate USD EUR,RUB - –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç\n\n"
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fileinfo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n\n"
        "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"
    )

@router.message(Command("todo"))
async def todo_command(message: Message):
    add_user(message.from_user.id)
    command_stats['todo'] += 1
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer(
            "üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏:\n"
            "‚Ä¢ /todo add <—Ç–µ–∫—Å—Ç> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n"
            "‚Ä¢ /todo list - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ /todo done <id> - –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
        )
        return
    
    subcommand = args[0].lower()
    
    if subcommand == "add":
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏: /todo add <—Ç–µ–∫—Å—Ç>")
            return
        
        task_text = " ".join(args[1:])
        task = task_storage.add_task(task_text)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {task.id}): {task_text}")
    
    elif subcommand == "list":
        await show_tasks_list(message, page=0)
    
    elif subcommand == "done":
        if len(args) < 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: /todo done <id>")
            return
        
        try:
            task_id = int(args[1])
            if task_storage.mark_done(task_id):
                await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ {task_id} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
            else:
                await message.answer(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except ValueError:
            await message.answer("‚ùå ID –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

async def show_tasks_list(message: Message, page: int = 0):
    tasks = task_storage.get_tasks(message.from_user.id)
    
    if not tasks:
        await message.answer("üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        return
    
    start_idx = page * TASKS_PER_PAGE
    end_idx = start_idx + TASKS_PER_PAGE
    page_tasks = tasks[start_idx:end_idx]
    
    text = f"üìù –í–∞—à–∏ –∑–∞–¥–∞—á–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):\n\n"
    for task in page_tasks:
        text += f"‚Ä¢ {task.id}. {task.text}\n"
    
    keyboard = []
    
    if page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tasks_page_{page-1}")])
    
    if end_idx < len(tasks):
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"tasks_page_{page+1}")])
    
    if keyboard:
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    else:
        reply_markup = None
    
    await message.answer(text, reply_markup=reply_markup)

@router.callback_query(lambda c: c.data.startswith("tasks_page_"))
async def handle_tasks_pagination(callback: CallbackQuery):
    page = int(callback.data.split("_")[-1])
    await callback.message.edit_text("")
    await show_tasks_list(callback.message, page)
    await callback.answer()

@router.message(Command("weather"))
async def weather_command(message: Message):
    add_user(message.from_user.id)
    command_stats['weather'] += 1
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if not args:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>")
        return
    
    city = " ".join(args)
    
    if not OPENWEATHER_API_KEY:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)")
        return
    
    await get_weather(message, city)

async def get_weather(message: Message, city: str, retry_count: int = 3):
    url = f"http://api.openweathermap.org/data/2.5/weather"
    params = {
        'q': city,
        'appid': OPENWEATHER_API_KEY,
        'units': 'metric',
        'lang': 'ru'
    }
    
    for attempt in range(retry_count):
        try:
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                city_name = data['name']
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']
                
                weather_text = (
                    f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ {city_name}:\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                    f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
                )
                
                await message.answer(weather_text)
                return
            
            elif response.status_code == 404:
                await message.answer(f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            else:
                raise Exception(f"HTTP {response.status_code}")
        
        except Exception as e:
            if attempt < retry_count - 1:
                await asyncio.sleep(2 ** attempt)
                continue
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}")

@router.message(Command("rate"))
async def rate_command(message: Message):
    add_user(message.from_user.id)
    command_stats['rate'] += 1
    
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rate <–±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞> <–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>\n–ü—Ä–∏–º–µ—Ä: /rate USD EUR,RUB")
        return
    
    base_currency = args[0].upper()
    target_currencies = [curr.strip().upper() for curr in args[1].split(',')]
    
    await get_exchange_rates(message, base_currency, target_currencies)

async def get_exchange_rates(message: Message, base_currency: str, target_currencies: list):
    url = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"
    
    try:
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            rates = data.get('rates', {})
            
            if not rates:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –¥–ª—è {base_currency}")
                return
            
            text = f"üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (–±–∞–∑–æ–≤–∞—è: {base_currency}):\n\n"
            
            for currency in target_currencies:
                if currency in rates:
                    rate = rates[currency]
                    text += f"‚Ä¢ {currency}: {rate:.4f}\n"
                else:
                    text += f"‚Ä¢ {currency}: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            
            await message.answer(text)
        
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (HTTP {response.status_code})")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {str(e)}")

async def analyze_file(message: Message):
    command_stats['fileinfo'] += 1
    
    try:
        if message.document:
            file_info = await bot.get_file(message.document.file_id)
            file_name = message.document.file_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª"
            file_size = message.document.file_size
            file_type = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç"
        elif message.photo:
            file_info = await bot.get_file(message.photo[-1].file_id)
            file_name = "–§–æ—Ç–æ"
            file_size = message.photo[-1].file_size
            file_type = "üñºÔ∏è –§–æ—Ç–æ"
        elif message.video:
            file_info = await bot.get_file(message.video.file_id)
            file_name = message.video.file_name or "–í–∏–¥–µ–æ"
            file_size = message.video.file_size
            file_type = "üé• –í–∏–¥–µ–æ"
        elif message.audio:
            file_info = await bot.get_file(message.audio.file_id)
            file_name = message.audio.file_name or "–ê—É–¥–∏–æ"
            file_size = message.audio.file_size
            file_type = "üéµ –ê—É–¥–∏–æ"
        else:
            return
        
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_info.file_path}"
        
        response = requests.get(file_url)
        if response.status_code == 200:
            file_content = response.content
            sha256_hash = hashlib.sha256(file_content).hexdigest()
            
            info_text = (
                f"üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n\n"
                f"{file_type}\n"
                f"üìù –ò–º—è —Ñ–∞–π–ª–∞: {file_name}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç ({file_size/1024:.2f} –ö–ë)\n"
                f"üîê SHA-256: {sha256_hash}"
            )
            
            await message.answer(info_text)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞")
    
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

@router.message(lambda message: message.document or message.photo or message.video or message.audio)
async def handle_file(message: Message):
    add_user(message.from_user.id)
    await analyze_file(message)

@router.message(Command("fileinfo"))
async def fileinfo_command(message: Message):
    add_user(message.from_user.id)
    if not message.document and not message.photo and not message.video and not message.audio:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        return
    
    await analyze_file(message)

@router.message(Command("stats"))
async def stats_command(message: Message):
    add_user(message.from_user.id)
    command_stats['stats'] += 1
    
    uptime_seconds = int(time.time() - start_time)
    uptime_hours = uptime_seconds // 3600
    uptime_minutes = (uptime_seconds % 3600) // 60
    uptime_seconds = uptime_seconds % 60
    
    unique_users_count = len(unique_users)
    
    total_commands = sum(command_stats.values())
    commands_text = "\n".join([f"‚Ä¢ {cmd}: {count}" for cmd, count in command_stats.most_common()])
    
    storage_size = task_storage.get_file_size_kb()
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:02d}:{uptime_minutes:02d}:{uptime_seconds:02d}\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users_count}\n"
        f"üìà –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_commands}\n\n"
        f"üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:\n{commands_text}\n\n"
        f"üíæ –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_size:.2f} –ö–ë"
    )
    
    await message.answer(stats_text)

async def main():
    print("Bot –£–Ω–∏–ü–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())